#!/usr/bin/env python

# An aid for making eot fonts that might work in IE, which doesn't
# like long font names and isn't fixable by the users community. The
# "fixes" this program does are rough, which probably is okay, because
# the eot fonts are going to be used in @font-face rather than
# installed.

# Copyright (C) 2010, 2013 Khaled Hosny and Barry Schwartz
# This file is part of the Sorts Mill Tools.
# 
# Sorts Mill Tools is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# Sorts Mill Tools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

#--------------------------------------------------------------------------

import fontforge
import optparse
import os
import subprocess
import tempfile

#--------------------------------------------------------------------------

def make_eot(filename, eot_filename):
    p = subprocess.Popen('ttf2eot ' + filename + ' > ' + eot_filename,
                         shell = True)
    os.waitpid(p.pid, 0)

#--------------------------------------------------------------------------

parser = optparse.OptionParser(usage='%prog [OPTIONS] FONT...')
parser.set_defaults(no_hints = False)
parser.add_option('-n', '--name', dest='new_name', metavar='NAME',
                  help='new font name')
parser.add_option('--no-hints', '--no-instructions',
                  dest='no_hints', action='store_true',
                  help='leave instructions out of the eot font')
(options, args) = parser.parse_args()

new_name = options.new_name
no_hints = options.no_hints

generation_flags = ['opentype']
if no_hints:
    generation_flags.append('omit-instructions')

for filename in args:

    eot_filename = os.path.splitext(os.path.basename(filename))[0] + '.eot'

    if new_name is None:
        make_eot(filename, eot_filename)

    else:
        temp_ttf = tempfile.NamedTemporaryFile(suffix = '.ttf')
        f = fontforge.open(filename)
        f.fontname = new_name
        f.familyname = new_name
        f.fullname = new_name
        new_sfnt_names = []
        for name in f.sfnt_names:
            if name[1] not in ('Family', 'SubFamily', 'Fullname',
                               'Preferred Family', 'Preferred Styles',
                               'WWS Family', 'WWS Subfamily'):
                new_sfnt_names.append(name)
        f.sfnt_names = new_sfnt_names
        f.generate(temp_ttf.name, flags = generation_flags)
        f.close()
        make_eot(temp_ttf.name, eot_filename)
        temp_ttf.close()

#--------------------------------------------------------------------------
