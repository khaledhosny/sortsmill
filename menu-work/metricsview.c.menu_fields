    .ti = {
      .text = (uint32_t *) N_("New O_utline Window"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'u' },
    .shortcut = H_("New Outline Window|Ctl+H"),
    .invoke = MVMenuOpenOutline,
    .mid = MID_OpenOutline },
    .ti = {
      .text = (uint32_t *) N_("New _Bitmap Window"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .shortcut = H_("New Bitmap Window|Ctl+J"),
    .invoke = MVMenuOpenBitmap,
    .mid = MID_OpenBitmap },
    .ti = {
      .text = (uint32_t *) N_("New _Metrics Window"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .disabled = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'M' },
    .shortcut = H_("New Metrics Window|Ctl+K"),
    .invoke = NULL		/* No function; never available. */
    .ti = {
      .text = (uint32_t *) N_("Warnings"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'M' },
    .shortcut = H_("Warnings|No Shortcut"),
    .invoke = _MenuWarnings,
    .mid = MID_Warnings },
    .ti = {
      .text = (uint32_t *) N_("Font|_New"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'N' }
    .ti = {
      .text = (uint32_t *) N_("Font|_New"),
      .image = (GImage *) "filenew.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'N' },
    .shortcut = H_("New|Ctl+N"),
    .invoke = MenuNew,
    .ti = {
      .text = (uint32_t *) N_("_Open"),
      .image = (GImage *) "fileopen.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Open|Ctl+O"),
    .invoke = MenuOpen,
    .ti = {
      .text = (uint32_t *) N_("Recen_t"),
      .image = (GImage *) "filerecent.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 't' },
    .sub = dummyitem,
    .moveto = MenuRecentBuild,
    .mid = MID_Recent },
    .ti = {
      .text = (uint32_t *) N_("_Close"),
      .image = (GImage *) "fileclose.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Close|Ctl+Shft+Q"),
    .invoke = MVMenuClose
    .ti = {
      .text = (uint32_t *) N_("_Save"),
      .image = (GImage *) "filesave.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'S' },
    .shortcut = H_("Save|Ctl+S"),
    .invoke = MVMenuSave
    .ti = {
      .text = (uint32_t *) N_("S_ave as..."),
      .image = (GImage *) "filesaveas.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'a' },
    .shortcut = H_("Save as...|Ctl+Shft+S"),
    .invoke = MVMenuSaveAs
    .ti = {
      .text = (uint32_t *) N_("_Generate Fonts..."),
      .image = (GImage *) "filegenerate.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'G' },
    .shortcut = H_("Generate Fonts...|Ctl+Shft+G"),
    .invoke = MVMenuGenerate
    .ti = {
      .text = (uint32_t *) N_("Generate Mac _Family..."),
      .image = (GImage *) "filegeneratefamily.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'F' },
    .shortcut = H_("Generate Mac Family...|Alt+Ctl+G"),
    .invoke = MVMenuGenerateFamily
    .ti = {
      .text = (uint32_t *) N_("Generate TTC..."),
      .image = (GImage *) "filegeneratefamily.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'F' },
    .shortcut = H_("Generate TTC...|No Shortcut"),
    .invoke = MVMenuGenerateTTC
    .ti = {
      .text = (uint32_t *) N_("_Merge Feature Info..."),
      .image = (GImage *) "filemergefeature.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'M' },
    .shortcut = H_("Merge Kern Info...|Ctl+Shft+K"),
    .invoke = MVMenuMergeKern
    .ti = {
      .text = (uint32_t *) N_("_Print..."),
      .image = (GImage *) "fileprint.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'P' },
    .shortcut = H_("Print...|Ctl+P"),
    .invoke = MVMenuPrint
    .ti = {
      .text = (uint32_t *) N_("Pr_eferences..."),
      .image = (GImage *) "fileprefs.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'e' },
    .shortcut = H_("Preferences...|No Shortcut"),
    .invoke = MenuPrefs
    .ti = {
      .text = (uint32_t *) N_("_X Resource Editor..."),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'e' },
    .shortcut = H_("X Resource Editor...|No Shortcut"),
    .invoke = MenuXRes
    .ti = {
      .text = (uint32_t *) N_("_Quit"),
      .image = (GImage *) "filequit.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'Q' },
    .shortcut = H_("Quit|Ctl+Q"),
    .invoke = MenuExit
    .ti = {
      .text = (uint32_t *) N_("_Undo"),
      .image = (GImage *) "editundo.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'U' },
    .shortcut = H_("Undo|Ctl+Z"),
    .invoke = MVUndo,
    .mid = MID_Undo },
    .ti = {
      .text = (uint32_t *) N_("_Redo"),
      .image = (GImage *) "editredo.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'R' },
    .shortcut = H_("Redo|Ctl+Y"),
    .invoke = MVRedo,
    .mid = MID_Redo },
    .ti = {
      .text = (uint32_t *) N_("Cu_t"),
      .image = (GImage *) "editcut.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 't' },
    .shortcut = H_("Cut|Ctl+X"),
    .invoke = MVCut,
    .mid = MID_Cut },
    .ti = {
      .text = (uint32_t *) N_("_Copy"),
      .image = (GImage *) "editcopy.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Copy|Ctl+C"),
    .invoke = MVCopy,
    .mid = MID_Copy },
    .ti = {
      .text = (uint32_t *) N_("C_opy Reference"),
      .image = (GImage *) "editcopyref.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'o' },
    .shortcut = H_("Copy Reference|Ctl+G"),
    .invoke = MVMenuCopyRef,
    .mid = MID_CopyRef },
    .ti = {
      .text = (uint32_t *) N_("Copy _Width"),
      .image = (GImage *) "editcopywidth.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'W' },
    .shortcut = H_("Copy Width|Ctl+W"),
    .invoke = MVMenuCopyWidth,
    .mid = MID_CopyWidth },
    .ti = {
      .text = (uint32_t *) N_("Copy _VWidth"),
      .image = (GImage *) "editcopyvwidth.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'V' },
    .shortcut = H_("Copy VWidth|No Shortcut"),
    .invoke = MVMenuCopyWidth,
    .mid = MID_CopyVWidth },
    .ti = {
      .text = (uint32_t *) N_("Co_py LBearing"),
      .image = (GImage *) "editcopylbearing.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'p' },
    .shortcut = H_("Copy LBearing|No Shortcut"),
    .invoke = MVMenuCopyWidth,
    .mid = MID_CopyLBearing },
    .ti = {
      .text = (uint32_t *) N_("Copy RBearin_g"),
      .image = (GImage *) "editcopyrbearing.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'g' },
    .shortcut = H_("Copy RBearing|No Shortcut"),
    .invoke = MVMenuCopyWidth,
    .mid = MID_CopyRBearing },
    .ti = {
      .text = (uint32_t *) N_("_Paste"),
      .image = (GImage *) "editpaste.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'P' },
    .shortcut = H_("Paste|Ctl+V"),
    .invoke = MVPaste,
    .mid = MID_Paste },
    .ti = {
      .text = (uint32_t *) N_("C_lear"),
      .image = (GImage *) "editclear.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .disabled = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'l' },
    .shortcut = H_("Clear|No Shortcut"),
    .invoke = MVClear,
    .mid = MID_Clear },
    .ti = {
      .text = (uint32_t *) N_("_Join"),
      .image = (GImage *) "editjoin.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'J' },
    .shortcut = H_("Join|Ctl+Shft+J"),
    .invoke = MVMenuJoin,
    .mid = MID_Join },
    .ti = {
      .text = (uint32_t *) N_("Select _All"),
      .image = (GImage *) "editselect.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .disabled = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'A' },
    .shortcut = H_("Select All|Ctl+A"),
    .invoke = MVSelectAll,
    .mid = MID_SelAll },
    .ti = {
      .text = (uint32_t *) N_("_Deselect All"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'D' },
    .shortcut = H_("Clear Selection|Escape"),
    .invoke = MVClearSelection,
    .mid = MID_ClearSel },
    .ti = {
      .text = (uint32_t *) N_("U_nlink Reference"),
      .image = (GImage *) "editunlink.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'U' },
    .shortcut = H_("Unlink Reference|Ctl+U"),
    .invoke = MVUnlinkRef,
    .mid = MID_UnlinkRef },
    .ti = {
      .text = (uint32_t *) N_("_Simplify"),
      .image = (GImage *) "elementsimplify.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'S' },
    .shortcut = H_("Simplify|Ctl+Shft+M"),
    .invoke = MVMenuSimplify,
    .mid = MID_Simplify },
    .ti = {
      .text = (uint32_t *) N_("Simplify More..."),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'S' },
    .shortcut = H_("Simplify More...|Alt+Ctl+Shft+M"),
    .invoke = MVMenuSimplifyMore,
    .mid = MID_SimplifyMore },
    .ti = {
      .text = (uint32_t *) N_("Clea_nup Glyph"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'n' },
    .shortcut = H_("Cleanup Glyph|No Shortcut"),
    .invoke = MVMenuCleanup,
    .mid = MID_CleanupGlyph },
    .ti = {
      .text = (uint32_t *) N_("_Remove Overlap"),
      .image = (GImage *) "overlaprm.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Remove Overlap|Ctl+Shft+O"),
    .invoke = MVMenuOverlap,
    .mid = MID_RmOverlap },
    .ti = {
      .text = (uint32_t *) N_("_Intersect"),
      .image = (GImage *) "overlapintersection.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'I' },
    .shortcut = H_("Intersect|No Shortcut"),
    .invoke = MVMenuOverlap,
    .mid = MID_Intersection },
    .ti = {
      .text = (uint32_t *) N_("_Find Intersections"),
      .image = (GImage *) "overlapfindinter.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Find Intersections|No Shortcut"),
    .invoke = MVMenuOverlap,
    .mid = MID_FindInter },
    .ti = {
      .text = (uint32_t *) N_("_Inline"),
      .image = (GImage *) "stylesinline.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Inline|No Shortcut"),
    .invoke = MVMenuInline
    .ti = {
      .text = (uint32_t *) N_("_Outline"),
      .image = (GImage *) "stylesoutline.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'I' },
    .shortcut = H_("Outline|No Shortcut"),
    .invoke = MVMenuOutline
    .ti = {
      .text = (uint32_t *) N_("_Shadow"),
      .image = (GImage *) "stylesshadow.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'S' },
    .shortcut = H_("Shadow|No Shortcut"),
    .invoke = MVMenuShadow
    .ti = {
      .text = (uint32_t *) N_("_Wireframe"),
      .image = (GImage *) "styleswireframe.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'W' },
    .shortcut = H_("Wireframe|No Shortcut"),
    .invoke = MVMenuWireframe
    .ti = {
      .text = (uint32_t *) N_("_Build Accented Glyph"),
      .image = (GImage *) "elementbuildaccent.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .shortcut = H_("Build Accented Glyph|Ctl+Shft+A"),
    .invoke = MVMenuBuildAccent,
    .mid = MID_BuildAccent },
    .ti = {
      .text = (uint32_t *) N_("Build _Composite Glyph"),
      .image = (GImage *) "elementbuildcomposite.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .shortcut = H_("Build Composite Glyph|No Shortcut"),
    .invoke = MVMenuBuildComposite,
    .mid = MID_BuildComposite },
    .ti = {
      .text = (uint32_t *) N_("_Font Info..."),
      .image = (GImage *) "elementfontinfo.png",
      .fg =  COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'F' },
    .shortcut = H_("Font Info...|Ctl+Shft+F"),
    .invoke = MVMenuFontInfo
    .ti = {
      .text = (uint32_t *) N_("Glyph _Info..."),
      .image = (GImage *) "elementglyphinfo.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'I' },
    .shortcut = H_("Glyph Info...|Ctl+I"),
    .invoke = MVMenuCharInfo,
    .mid = MID_CharInfo },
    .ti = {
      .text = (uint32_t *) N_("S_how Dependent"),
      .image = (GImage *) "elementshowdep.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'D' },
    .shortcut = H_("Show Dependent|Alt+Ctl+I"),
    .invoke = MVMenuShowDependents,
    .mid = MID_ShowDependents },
    .ti = {
      .text = (uint32_t *) N_("Find Pr_oblems..."),
      .image = (GImage *) "elementfindprobs.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'o' },
    .shortcut = H_("Find Problems...|Ctl+E"),
    .invoke = MVMenuFindProblems,
    .mid = MID_FindProblems },
    .ti = {
      .text = (uint32_t *) N_("Bitm_ap Strikes Available..."),
      .image = (GImage *) "elementbitmapsavail.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'A' },
    .shortcut = H_("Bitmap Strikes Available...|Ctl+Shft+B"),
    .invoke = MVMenuBitmaps,
    .mid = MID_AvailBitmaps },
    .ti = {
      .text = (uint32_t *) N_("Regenerate _Bitmap Glyphs..."),
      .image = (GImage *) "elementregenbitmaps.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .shortcut = H_("Regenerate Bitmap Glyphs...|Ctl+B"),
    .invoke = MVMenuBitmaps,
    .mid = MID_RegenBitmaps },
    .ti = {
      .text = (uint32_t *) N_("_Transform..."),
      .image = (GImage *) "elementtransform.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("Transform...|Ctl+\\"),
    .invoke = MVMenuTransform,
    .mid = MID_Transform },
    .ti = {
      .text = (uint32_t *) N_("Tile _Path..."),
      .image = (GImage *) "elementtilepath.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'P' },
    .shortcut = H_("Tile Path...|No Shortcut"),
    .invoke = MVMenuTilePath,
    .mid = MID_TilePath },
    .ti = {
      .text = (uint32_t *) N_("_Remove Overlap"),
      .image = (GImage *) "rmoverlap.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .sub = rmlist,
    .mid = MID_RmOverlap },
    .ti = {
      .text = (uint32_t *) N_("_Simplify"),
      .image = (GImage *) "elementsimplify.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'S' },
    .sub = smlist,
    .mid = MID_Simplify },
    .ti = {
      .text = (uint32_t *) N_("Add E_xtrema"),
      .image = (GImage *) "elementaddextrema.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'x' },
    .shortcut = H_("Add Extrema|Ctl+Shft+X"),
    .invoke = MVMenuAddExtrema,
    .mid = MID_AddExtrema },
    .ti = {
      .text = (uint32_t *) N_("To _Int"),
      .image = (GImage *) "elementround.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'I' },
    .shortcut = H_("To Int|Ctl+Shft+_"),
    .invoke = MVMenuRound2Int,
    .mid = MID_Round },
    .ti = {
      .text = (uint32_t *) N_("Effects"),
      .image = (GImage *) "elementstyles.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = '\0' },
    .sub = eflist,
    .mid = MID_Effects },
    .ti = {
      .text = (uint32_t *) N_("Autot_race"),
      .image = (GImage *) "elementautotrace.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'r' },
    .shortcut = H_("Autotrace|Ctl+Shft+T"),
    .invoke = MVMenuAutotrace,
    .mid = MID_Autotrace },
    .ti = {
      .text = (uint32_t *) N_("_Correct Direction"),
      .image = (GImage *) "elementcorrectdir.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'D' },
    .shortcut = H_("Correct Direction|Ctl+Shft+D"),
    .invoke = MVMenuCorrectDir,
    .mid = MID_Correct },
    .ti = {
      .text = (uint32_t *) N_("B_uild"),
      .image = (GImage *) "elementbuildaccent.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .sub = balist,
    .moveto = balistcheck_mv,
    .mid = MID_BuildAccent },
    .ti = {
      .text = (uint32_t *) N_("All"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .disabled = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'K' },
    .shortcut = H_("All|No Shortcut")
    .ti = {
      .text = (uint32_t *) N_("_Kern Pairs"),
      .fg =  COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'K' },
    .shortcut = H_("Kern Pairs|No Shortcut"),
    .invoke = MVMenuKernPairs,
    .mid = MID_KernPairs },
    .ti = {
      .text = (uint32_t *) N_("_Anchored Pairs"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'K' },
    .shortcut = H_("Anchored Pairs|No Shortcut"),
    .sub = dummyall,
    .moveto = aplistbuild_mv,
    .invoke = MVMenuAnchorPairs,
    .mid = MID_AnchorPairs },
    .ti = {
      .text = (uint32_t *) N_("_Ligatures"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'L' },
    .shortcut = H_("Ligatures|No Shortcut"),
    .invoke = MVMenuLigatures,
    .mid = MID_Ligatures },
    .ti = {
      .text = (uint32_t *) N_("Layer|Foreground"),
      .fg =  COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .disabled = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .checkable = true,
      .checked = true
    .invoke = MVMenuChangeLayer,
    .mid = ly_fore
    .ti = {
      .text = (uint32_t *) N_("_Show"),
      .fg =  COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .checkable = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Show Grid|No Shortcut"),
    .invoke = MVMenuShowGrid,
    .mid = MID_ShowGrid },
    .ti = {
      .text = (uint32_t *) N_("_Partial"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .checkable = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Partial Grid|No Shortcut"),
    .invoke = MVMenuShowGrid,
    .mid = MID_PartialGrid },
    .ti = {
      .text = (uint32_t *) N_("Hide when _Moving"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .checkable = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Hide Grid when Moving|No Shortcut"),
    .invoke = MVMenuShowGrid,
    .mid = MID_HideGridWhenMoving },
    .ti = {
      .text = (uint32_t *) N_("_Hide"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .checkable = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Hide Grid|No Shortcut"),
    .invoke = MVMenuShowGrid,
    .mid = MID_HideGrid },
    .ti = {
      .text = (uint32_t *) N_("Z_oom out"),
      .image = (GImage *) "viewzoomout.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'o' },
    .shortcut = H_("Zoom out|Alt+Ctl+-"),
    .invoke = MVMenuScale,
    .mid = MID_ZoomOut },
    .ti = {
      .text = (uint32_t *) N_("Zoom _in"),
      .image = (GImage *) "viewzoomin.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'i' },
    .shortcut = H_("Zoom in|Alt+Ctl+Shft++"),
    .invoke = MVMenuScale,
    .mid = MID_ZoomIn },
    .ti = {
      .text = (uint32_t *) N_("Insert Glyph _After..."),
      .image = (GImage *) "viewinsertafter.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Insert Glyph After...|No Shortcut"),
    .invoke = MVMenuInsertChar,
    .mid = MID_InsertCharA },
    .ti = {
      .text = (uint32_t *) N_("Insert Glyph _Before..."),
      .image = (GImage *) "viewinsertbefore.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .shortcut = H_("Insert Glyph Before...|No Shortcut"),
    .invoke = MVMenuInsertChar,
    .mid = MID_InsertCharB },
    .ti = {
      .text = (uint32_t *) N_("_Replace Glyph..."),
      .image = (GImage *) "viewreplace.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'R' },
    .shortcut = H_("Replace Glyph...|Ctl+G"),
    .invoke = MVMenuChangeChar,
    .mid = MID_ReplaceChar },
    .ti = {
      .text = (uint32_t *) N_("_Next Glyph"),
      .image = (GImage *) "viewnext.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'N' },
    .shortcut = H_("Next Glyph|Ctl+]"),
    .invoke = MVMenuChangeChar,
    .mid = MID_Next },
    .ti = {
      .text = (uint32_t *) N_("_Prev Glyph"),
      .image = (GImage *) "viewprev.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'P' },
    .shortcut = H_("Prev Glyph|Ctl+["),
    .invoke = MVMenuChangeChar,
    .mid = MID_Prev },
    .ti = {
      .text = (uint32_t *) N_("Next _Defined Glyph"),
      .image = (GImage *) "viewnextdef.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'D' },
    .shortcut = H_("Next Defined Glyph|Alt+Ctl+]"),
    .invoke = MVMenuChangeChar,
    .mid = MID_NextDef },
    .ti = {
      .text = (uint32_t *) N_("Prev Defined Gl_yph"),
      .image = (GImage *) "viewprevdef.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'a' },
    .shortcut = H_("Prev Defined Glyph|Alt+Ctl+["),
    .invoke = MVMenuChangeChar,
    .mid = MID_PrevDef },
    .ti = {
      .text = (uint32_t *) N_("Find In Font _View"),
      .image = (GImage *) "viewfindinfont.png",
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'V' },
    .shortcut = H_("Find In Font View|Ctl+Shft+<"),
    .invoke = MVMenuFindInFontView,
    .mid = MID_FindInFontView },
    .ti = {
      .text = (uint32_t *) N_("_Layers"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = '\0' },
    .sub = lylist,
    .moveto = lylistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("Com_binations"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'b' },
    .sub = cblist,
    .moveto = cblistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("Show _Grid"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'G' },
    .sub = gdlist,
    .moveto = gdlistcheck_mv,
    .invoke = MVMenuShowGrid,
    .mid = MID_ShowGrid },
    .ti = {
      .text = (uint32_t *) N_("_Anti Alias"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'A' },
    .shortcut = H_("Anti Alias|Ctl+="),
    .invoke = MVMenuAA,
    .mid = MID_AntiAlias },
    .ti = {
      .text = (uint32_t *) N_("_Vertical"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = '\0' },
    .shortcut = H_("Vertical|No Shortcut"),
    .invoke = MVMenuVertical,
    .mid = MID_Vertical },
    .ti = {
      .text = (uint32_t *) N_("Size set from _Window"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Size set from Window|No Shortcut"),
    .invoke = MVMenuSizeWindow,
    .mid = MID_SizeWindow },
    .ti = {
      .text = (uint32_t *) N_("Set Point _Size"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Set Point Size|No Shortcut"),
    .invoke = MVMenuPointSize,
    .mid = MID_PointSize },
    .ti = {
      .text = (uint32_t *) N_("_Bigger Point Size"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'B' },
    .shortcut = H_("Bigger Point Size|Ctl+Shft++"),
    .invoke = MVMenuChangePointSize,
    .mid = MID_Bigger },
    .ti = {
      .text = (uint32_t *) N_("_Smaller Point Size"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'S' },
    .shortcut = H_("Smaller Point Size|Ctl+-"),
    .invoke = MVMenuChangePointSize,
    .mid = MID_Smaller },
    .ti = {
      .text = (uint32_t *) N_("_Outline"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'O' },
    .shortcut = H_("Outline|No Shortcut"),
    .invoke = MVMenuShowBitmap,
    .mid = MID_Outline },
    .ti = {
      .text = (uint32_t *) N_("_Kerning only"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Kerning only|No Shortcut"),
    .invoke = MVMenuWindowType,
    .mid = MID_KernOnly },
    .ti = {
      .text = (uint32_t *) N_("_Advance Width only"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("Advance Width Only|No Shortcut"),
    .invoke = MVMenuWindowType,
    .mid = MID_WidthOnly },
    .ti = {
      .text = (uint32_t *) N_("_Both"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .checkable = true,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("Both|No Shortcut"),
    .invoke = MVMenuWindowType,
    .mid = MID_BothKernWidth },
    .ti = {
      .text = (uint32_t *) N_("_Center in Width"),
      .image = (GImage *) "metricscenter.png",
      .fg =  COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'C' },
    .shortcut = H_("Center in Width|No Shortcut"),
    .invoke = MVMenuCenter,
    .mid = MID_Center },
    .ti = {
      .text = (uint32_t *) N_("_Thirds in Width"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("Thirds in Width|No Shortcut"),
    .invoke = MVMenuCenter,
    .mid = MID_Thirds },
    .ti = {
      .text = (uint32_t *) N_("_Window Type"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .sub = tylist,
    .moveto = tylistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("Ker_n By Classes..."),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("Kern By Classes...|No Shortcut"),
    .invoke = MVMenuKernByClasses
    .ti = {
      .text = (uint32_t *) N_("VKern By Classes..."),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("VKern By Classes...|No Shortcut"),
    .invoke = MVMenuVKernByClasses,
    .mid = MID_VKernClass },
    .ti = {
      .text = (uint32_t *) N_("VKern From HKern"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("VKern From HKern|No Shortcut"),
    .invoke = MVMenuVKernFromHKern,
    .mid = MID_VKernFromHKern },
    .ti = {
      .text = (uint32_t *) N_("Kern Pair Closeup..."),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'T' },
    .shortcut = H_("Kern Pair Closeup...|No Shortcut"),
    .invoke = MVMenuKPCloseup
    .ti = {
      .text = (uint32_t *) N_("_File"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'F' },
    .sub = fllist,
    .moveto = fllistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("_Edit"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'E' },
    .sub = edlist,
    .moveto = edlistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("E_lement"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'l' },
    .sub = ellist,
    .moveto = ellistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("_View"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'V' },
    .sub = vwlist,
    .moveto = vwlistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("_Metrics"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'M' },
    .sub = mtlist,
    .moveto = mtlistcheck_mv
    .ti = {
      .text = (uint32_t *) N_("_Window"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'W' },
    .sub = wnmenu,
    .moveto = MVWindowMenuBuild
    .ti = {
      .text = (uint32_t *) N_("_Help"),
      .fg = COLOR_DEFAULT,
      .bg = COLOR_DEFAULT,
      .image_precedes = true,
      .text_is_1byte = true,
      .text_has_mnemonic = true,
      .mnemonic = 'H' },
    .sub = helplist
