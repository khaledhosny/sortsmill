;; -*- mode: scheme; geiser-scheme-implementation: guile; coding: utf-8 -*-

;; Copyright (C) 2012, 2013 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(library (sortsmill pkg-info)

  (export pkg-info:package
          pkg-info:package-bugreport
          pkg-info:package-name
          pkg-info:package-string
          pkg-info:package-tarname
          pkg-info:package-url
          pkg-info:package-version

          pkg-info:version-major
          pkg-info:version-minor
          pkg-info:version-patch
          pkg-info:version-extra
          pkg-info:version-extra-short

          pkg-info:have-pure-api?

          pkg-info:have-python-api?
          pkg-info:python-compatibility?
          pkg-info:py-major-version
          pkg-info:py-minor-version
          pkg-info:py-micro-version
          pkg-info:py-release-level
          pkg-info:py-release-serial
          pkg-info:py-version
          pkg-info:py-version-hex
          pkg-info:pyinit-function-name

          pkg-info:textdomain

          pkg-info:pixmapsdir
          pkg-info:cursorsdir
          pkg-info:htdocsdir
          pkg-info:pkgconfigdir
          pkg-info:pkgguiledatadir
          pkg-info:guilemoduledir
          pkg-info:guileobjmoduledir
          pkg-info:cythonincludedir
          pkg-info:fcmoduleincludedir
          pkg-info:pkgdatadir
          pkg-info:localedir
          pkg-info:sysconfdir)

  (import (sortsmill dynlink)
          (rnrs)
          (only (guile) string-prefix? string-suffix? eval-when))

  (eval-when (compile load eval)
    (sortsmill-dynlink-load-extension "init_guile_sortsmill_directory_layout"))

  (define-syntax yes?
    (lambda (x)
      (syntax-case x ()
        [(_ yes-or-no)
         (if (string=? (syntax->datum #'yes-or-no) "yes")
             #'#t #'#f)] )))

  (define-syntax expansion-or-f
    (lambda (x)
      (syntax-case x ()
        [(_) #'#f]                      ; The expansion is empty.
        [(_ possible-expansion)
         (let ([maybe-symbol (syntax->datum #'possible-expansion)])
           (if (symbol? maybe-symbol)
               [let ([s (symbol->string maybe-symbol)])
                 (if (and (<= 3 (string-length s))
                          (string-prefix? "@" s)
                          (string-suffix? "@" s))
                     #'#f                 ; Expansion did not happen.
                     #'possible-expansion ; Expansion did happen.
                     )]
               #'possible-expansion ; Expansion did happen.
               ))] )))

  (define pkg-info:package "@PACKAGE@")
  (define pkg-info:package-bugreport "@PACKAGE_BUGREPORT@")
  (define pkg-info:package-name "@PACKAGE_NAME@")
  (define pkg-info:package-string "@PACKAGE_STRING@")
  (define pkg-info:package-tarname "@PACKAGE_TARNAME@")
  (define pkg-info:package-url "@PACKAGE_URL@")
  (define pkg-info:package-version "@PACKAGE_VERSION@")

  (define pkg-info:version-major "@VERSION_MAJOR@")
  (define pkg-info:version-minor "@VERSION_MINOR@")
  (define pkg-info:version-patch "@VERSION_PATCH@")
  (define pkg-info:version-extra "@VERSION_EXTRA@")
  (define pkg-info:version-extra_short "@VERSION_EXTRA_SHORT@")

  (define pkg-info:have-pure-api? (yes? "@i_do_have_pure_api@"))

  (define pkg-info:have-python-api? (yes? "@i_do_have_python_api@"))
  (define pkg-info:python-compatibility? (yes? "@PYTHON_COMPATIBILITY@"))
  (define pkg-info:py-major-version (expansion-or-f @PY_MAJOR_VERSION@))
  (define pkg-info:py-minor-version (expansion-or-f @PY_MINOR_VERSION@))
  (define pkg-info:py-micro-version (expansion-or-f @PY_MICRO_VERSION@))
  (define pkg-info:py-release-level (expansion-or-f @PY_RELEASE_LEVEL@))
  (define pkg-info:py-release-serial (expansion-or-f @PY_RELEASE_SERIAL@))
  (define pkg-info:py-version (expansion-or-f @PY_VERSION_QUOTED@))
  (define pkg-info:py-version-hex (expansion-or-f @PY_VERSION_HEX@))

  (define pkg-info:pyinit-function-name
    (if pkg-info:have-python-api?
        [let ([prefix
               (if (< pkg-info:py-major-version 3) "init" "PyInit_")])
          (lambda (python-module-name)
            (string-append prefix python-module-name))]
        [lambda (python-module-name) #f] ))

  (define pkg-info:textdomain "@FF_TEXTDOMAIN@")

  ) ;; end of library.
