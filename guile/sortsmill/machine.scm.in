;; -*- mode: scheme; coding: utf-8 -*-

;; Copyright (C) 2012, 2013 Khaled Hosny and Barry Schwartz
;; This file is part of the Sorts Mill Tools.
;; 
;; Sorts Mill Tools is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; Sorts Mill Tools is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(library (sortsmill machine)

  (export _Bool-size                    ; sizeof (_Bool)
          intptr_t-size                 ; sizeof (intptr_t)
          uintptr_t-size                ; sizeof (uintptr_t)
          float-size                    ; sizeof (float)
          double-size                   ; sizeof (double)

          c:float-type
          c:int-type
          c:uint-type

          _Bool

          bytevector-address-native-set!
          bytevector-pointer-native-set!
          bytevector-address-native-ref
          bytevector-pointer-native-ref
          set-pointer!
          get-pointer

          SCM-ref
          SCM-set!
          bytevector-SCM-ref
          bytevector-SCM-set!

          ;; Re-exported from (sortsmill math math-constants).
          c:flt-epsilon
          c:dbl-epsilon
          c:flt-epsilon-exact
          c:dbl-epsilon-exact)

  (import (only (sortsmill math math-constants)
                c:flt-epsilon c:dbl-epsilon
                c:flt-epsilon-exact c:dbl-epsilon-exact)
          (rnrs)
          (except (guile) error)
          (ice-9 match)
          (system foreign))

;;;  (eval-when (compile load eval)
;;;    (load-extension "libguile-sortsmill_fontforge" "init_libguile_sortsmill_aux"))

  (define-syntax _Bool-size
    (identifier-syntax @SIZEOF__BOOL@))

  (define-syntax intptr_t-size
    (identifier-syntax @SIZEOF_INTPTR_T@))

  (define-syntax uintptr_t-size
    (identifier-syntax @SIZEOF_UINTPTR_T@))

  (define-syntax float-size
    (identifier-syntax @SIZEOF_FLOAT@))

  (define-syntax double-size
    (identifier-syntax @SIZEOF_DOUBLE@))

;;;  (define-syntax float-size
;;;    (make-variable-transformer
;;;     (lambda (x)
;;;       (syntax-case x ()
;;;         (ident (identifier? #'ident)
;;;                (datum->syntax x (sizeof float)))))))
;;;
;;;  (define-syntax double-size
;;;    (make-variable-transformer
;;;     (lambda (x)
;;;       (syntax-case x ()
;;;         (ident (identifier? #'ident)
;;;                (datum->syntax x (sizeof double)))))))

  (define (c:float-type n)
    (cond
     ((= n float-size) 'float)
     ((= n double-size) 'double)))

  (define (c:int-type n)
    (case n
      ((1) 'int8_t)
      ((2) 'int16_t)
      ((4) 'int32_t)
      ((8) 'int64_t)))

  (define (c:uint-type n)
    (case n
      ((1) 'uint8_t)
      ((2) 'uint16_t)
      ((4) 'uint32_t)
      ((8) 'uint64_t)))

  (define-syntax _Bool
    (make-variable-transformer
     (lambda (x)
       (syntax-case x ()
         (var (identifier? #'var)
              (case _Bool-size
                [(1) #'uint8]             ; Probably.
                [(2) #'uint16]            ; Very unlikely.
                [(4) #'uint32]            ; Very, very unlikely.
                [else (error
                       '_Bool
                       ;; Do not bother putting this in translation files.
                       "we do not know how to handle _Bool of this size"
                       _Bool-size)] ))))))

  (define-syntax bytevector-address-native-set!
    (lambda (x)
      (syntax-case x ()
        ((_ bv index value)
         (match (sizeof '*)
           (4 #'(bytevector-u32-native-set! bv index value))
           (8 #'(bytevector-u64-native-set! bv index value))
           (else (error
                  'bytevector-address-native-set!
                  ;; Do not bother putting this in translation files.
                  "we do not know how to handle addresses of this size"
                  (sizeof '*))
                 #'#f))))))

  (define (bytevector-pointer-native-set! bv index p)
    (bytevector-address-native-set! bv index (pointer-address p)))

  (define-syntax bytevector-address-native-ref
    (lambda (x)
      (syntax-case x ()
        ((_ bv index)
         (match (sizeof '*)
           (4 #'(bytevector-u32-native-ref bv index))
           (8 #'(bytevector-u64-native-ref bv index))
           (else (error
                  'bytevector-address-native-ref
                  ;; Do not bother putting this in translation files.
                  "we do not know how to handle addresses of this size"
                  (sizeof '*))
                 #'#f))))))

  (define (bytevector-pointer-native-ref bv index)
    (make-pointer (bytevector-address-native-ref bv index)))

  (define (set-pointer! bv p)
    (bytevector-pointer-native-set! bv 0 p))

  (define (get-pointer bv)
    (bytevector-pointer-native-ref bv 0))

  ) ;; end of library.
