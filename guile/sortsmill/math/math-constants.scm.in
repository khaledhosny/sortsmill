;; -*- mode: scheme; coding: utf-8 -*-

;; Copyright (C) 2012, 2013 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(library (sortsmill math math-constants)

  (export c:flt-epsilon       ; FLT_EPSILON as an ‘inexact’ number.
          c:dbl-epsilon       ; DBL_EPSILON as an ‘inexact’ number.
          c:flt-epsilon-exact ; FLT_EPSILON as an ‘exact’ number.
          c:dbl-epsilon-exact ; DBL_EPSILON as an ‘exact’ number.
          pi                  ; Circumference over diameter of a circle.
          pi/2                ; Half of pi.
          )

  (import (rnrs)
          (except (guile) error))

  (define c:flt-epsilon
    (let ((data '@C_CONST_FLT_EPSILON@))
      (exact->inexact
       (* (list-ref data 1)
          (expt (list-ref data 2) (list-ref data 3))))))

  (define c:flt-epsilon-exact
    (let ((data '@C_CONST_FLT_EPSILON@))
      (* (list-ref data 1)
         (expt (list-ref data 2) (list-ref data 3)))))

  (define c:dbl-epsilon
    (let ((data '@C_CONST_DBL_EPSILON@))
      (exact->inexact
       (* (list-ref data 1)
          (expt (list-ref data 2) (list-ref data 3))))))

  (define c:dbl-epsilon-exact
    (let ((data '@C_CONST_DBL_EPSILON@))
      (* (list-ref data 1)
         (expt (list-ref data 2) (list-ref data 3)))))

  (define pi (* 4 (atan 1)))
  (define pi/2 (* 2 (atan 1)))

  ) ;; end of library.
