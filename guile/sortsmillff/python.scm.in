;; -*- mode: scheme; geiser-scheme-implementation: guile; coding: utf-8 -*-

;; Copyright (C) 2012 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(define-module (sortsmillff python))

(import (sortsmillff i18n)
        (sortsmillff strings)
        (rnrs)
        (only (srfi :26) cut)
        (system foreign)
        (ice-9 match))

(export if-fontforge-has-python-api)

(re-export enable-hash-guillemet-strings
           disable-hash-guillemet-strings)

(define-syntax if-fontforge-has-python-api
  (lambda (x)
    (match '@i_do_have_python_scripting@
      ('yes
       (syntax-case x ()
         ((_ e e* ...) #'(begin e e* ...))))
      ('no
       (syntax-case x ()
         ((_ _ _ ...) #'*unspecified*))))))

(if-fontforge-has-python-api

 (export python-dll

         py-initialize
         py-finalize

         make-python-error
         python-error?
         pyerr-type
         condition-pyerr-type
         pyerr-value
         condition-pyerr-value
         pyerr-traceback
         condition-pyerr-traceback

         pyobject?
         pointer->pyobject
         borrowed-pointer->pyobject
         pyobject->pointer

         ;; ‘pyguile’ is an opaque representation of Guile objects in
         ;; Python.
         scm->pyguile
         pyguile->scm
         pyguile?

         ;; Elements are converted by ‘scm->pyguile’ by default, but a
         ;; different converter can be specified as an optional second
         ;; argument.
         list->pytuple
         list->pylist
         alist->pydict

         ;; Elements are converted by ‘pointer->pyobject’ by default,
         ;; but a different converter can be specified as an optional
         ;; second argument.
         pytuple->list
         pylist->list

         pytuple?
         pylist?

         pyindexed-ref
         pyindexed-set!

         py-none ;; This is a function, not a constant.
         pynone?

         py-false ;; This is a function, not a constant.
         py-true  ;; This is a function, not a constant.
         py-not
         py-not-not ;; Use this to convert a Python value to a pybool.
         boolean->pybool
         pybool->boolean
         pybool?

         integer->pyint
         integer->pylong
         integer->pympz
         pyint->integer
         pylong->integer
         pympz->integer
         pylong->pympz
         pympz->pylong
         pyint?
         pylong?
         pympz?

         pointer->pylong ;; Big integers to represent addresses.
         pylong->pointer

         string->pystring ;; Converts to a unicode object.
         pystring->string ;; Converts from a unicode or UTF-8 bytes object.
         pyunicode?
         pybytes?
         pystring?

         py-repr
         py-str
         py-name
         py-dict

         pyexec
         pyexec-file-name
         pyimport
         pymodule-get-file-name
         pyeval
         current-pymodule
         )

 (define python-dll
   (dynamic-link "libguile-sortsmillff_python"))

 (dynamic-call "init_guile_sortsmillff_python" python-dll)

 (define py-initialize
   (pointer->procedure
    void (dynamic-func "Py_Initialize" python-dll) `()))

 (define py-finalize
   (pointer->procedure
    void (dynamic-func "Py_Finalize" python-dll) `()))

 (define-condition-type &python-error &error
   make-python-error python-error?
   (pyerr-type condition-pyerr-type)
   (pyerr-value condition-pyerr-value)
   (pyerr-traceback condition-pyerr-traceback))

 (define-wrapped-pointer-type pyobject
   pyobject?
   private:pointer->pyobject pyobject->pointer
   (lambda (obj port)
     (format port "#<pyobject ~s 0x~x>"
             (pystring->string (py-str obj))
             (pointer-address (pyobject->pointer obj)))))

 (define pointer->pyobject
   (lambda (p)
     (private:pointer->pyobject (grab-pyobject-reference p))))

 (define borrowed-pointer->pyobject 
   (lambda (p)
     (private:pointer->pyobject (grab-borrowed-pyobject-reference p))))

 (define procedure:pyobject?
   ;; Wrap the syntax transformer @var{pyobject?} in a
   ;; procedure, so C code can use it.
   (lambda (x) (pyobject? x)))

 (define procedure:pyobject->pointer
   ;; Wrap the syntax transformer @var{pyobject->pointer} in a
   ;; procedure, so C code can use it.
   (lambda (x) (pyobject->pointer x)))

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (eval-when
  (compile eval load)
  [define (guile-python-pyx-func func-name)
    (dynamic-func func-name
                  (dynamic-link (pymodule-get-file-name
                                 (guile-python-pyx-pymodule))))] )

 (define-syntax define-guile-python-pyx-procedure
   (lambda (x)
     (syntax-case x ()
       [(_ return-type c-func arg-types)
        (let* ([my-fluid
                (datum->syntax
                 x (make-symbol
                    (string-append "*" (syntax->datum #'c-func) "*")))]
               [get-my-proc
                (datum->syntax
                 x (string->symbol (syntax->datum #'c-func)))])
          #`(begin
              ;; Thread local storage for the procedure, once we have
              ;; created it.
              (define #,my-fluid (make-fluid #f))

              (define #,get-my-proc
                (lambda ()
                  (let ((my-proc (fluid-ref #,my-fluid)))
                    (if my-proc my-proc
                        [let ((new-proc
                               [pointer->procedure
                                return-type
                                (guile-python-pyx-func c-func)
                                arg-types]))
                          (fluid-set! #,my-fluid new-proc)
                          new-proc] ))))))] )))

 (define-syntax define-py-to-py-filter
   (lambda (x)
     (syntax-case x ()
       [(_ filter-name c-func)
        #`(define (filter-name obj)
            (cond
             [(pyobject? obj)
              (let ((result ((c-func) (pyobject->pointer obj))))
                (if (null-pointer? result)
                    (py-failure (quote c-func) (list obj))
                    (pointer->pyobject result)))]
             [else
              (assertion-failure (quote filter-name)
                                 (_ "expected a Python object") obj)] ))]
       )))

 (define-guile-python-pyx-procedure '* "__c_pyguile_make" '(* *))
 (define-guile-python-pyx-procedure '* "__c_pyguile_address" '(*))
 (define-guile-python-pyx-procedure '* "__pyguile_check" '(*))
 (define-guile-python-pyx-procedure '* "__exec_python" '(*))
 (define-guile-python-pyx-procedure '* "__exec_python_file_name" '(*))
 (define-guile-python-pyx-procedure '* "__c_string_to_python_string" '(*))
 (define-guile-python-pyx-procedure '* "__python_string_to_c_string" '(*))
 (define-guile-python-pyx-procedure '* "__c_eval_python" '(*))
 (define-guile-python-pyx-procedure '* "__current_python_module" '())
 (define-guile-python-pyx-procedure '* "__pylong_to_pympz" '(*))
 (define-guile-python-pyx-procedure '* "__pympz_to_pylong" '(*))
 (define-guile-python-pyx-procedure '* "__is_pympz" '(*))
 (define-guile-python-pyx-procedure '* "__py_repr" '(*))
 (define-guile-python-pyx-procedure '* "__py_str" '(*))
 (define-guile-python-pyx-procedure '* "__py_name" '(*))
 (define-guile-python-pyx-procedure '* "__py_dict" '(*))
 (define-guile-python-pyx-procedure '* "__pyindexed_ref" '(*))
 (define-guile-python-pyx-procedure '* "__pyindexed_set" '(*))

 (define-py-to-py-filter pyguile?-base __pyguile_check)
 (define-py-to-py-filter pyexec-base __exec_python)
 (define-py-to-py-filter pyexec-file-name-base __exec_python_file_name)
 (define-py-to-py-filter pylong->pympz __pylong_to_pympz)
 (define-py-to-py-filter pympz->pylong __pympz_to_pylong)
 (define-py-to-py-filter py-repr __py_repr)
 (define-py-to-py-filter py-str __py_str)
 (define-py-to-py-filter py-name __py_name)
 (define-py-to-py-filter py-dict __py_dict)
 (define-py-to-py-filter pyindexed-ref-core __pyindexed_ref)
 (define-py-to-py-filter pyindexed-set!-core __pyindexed_set)

 (define (scm->pyguile obj)
   (cond [(pyguile? obj) obj]
         [else (pointer->pyobject
                ((__c_pyguile_make) (scm->pointer obj) pyguile-stringifier))]))

 (define pyguile-stringifier
   (procedure->pointer
    '*
    (lambda (p) (pyobject->pointer
                 (string->pystring (with-output-to-string
                                    [lambda () (write (pointer->scm p))]))))
    '(*)))

 (define (pyguile->scm obj)
   (cond [(pyguile? obj)
          (pointer->scm ((__c_pyguile_address) (pyobject->pointer obj)))]
         [else (assertion-violation 'pyguile->scm
                                    (_ "expected a pyguile object")
                                    obj)]))

 (define (pyguile? obj)
   (if (pyobject? obj) (pyguile?-base obj) #f))

 (define (pyexec s)
   (cond
    [(or (string? s) (pystring? s))
     (let ([retval (pyexec-base (string->pystring s))])
       (cond [(pynone? retval) *unspecified*]
             [else (raise
                    (condition
                     (apply make-python-error
                            (pytuple->list (cadr (pytuple->list retval))))
                     (make-who-condition 'pyexec)
                     (make-irritants-condition (list s))))] ))]
    [else (string-or-pystring-failure 'pyexec s)]))

 (define (pyexec-file-name file-name)
   (cond
    [(or (string? file-name) (pystring? file-name))
     (let ([retval (pyexec-file-name-base (string->pystring file-name))])
       (cond [(pynone? retval) *unspecified*]
             [else (raise
                    (condition
                     (apply make-python-error
                            (pytuple->list (cadr (pytuple->list retval))))
                     (make-who-condition 'pyexec-file-name)
                     (make-irritants-condition (list file-name))))] ))]
    [else (string-or-pystring-failure 'pyexec-file-name file-name)]))

 (define integer->pylong (compose pympz->pylong integer->pympz))
 (define pylong->integer (compose pympz->integer pylong->pympz))

 (define (pyindexed-ref obj i)
   (assert (pyobject? obj))
   (pyindexed-ref-core (list->pytuple (list obj i))))

 (define (pyindexed-set! obj i v)
   (assert (pyobject? obj))
   (pyindexed-set!-core (list->pytuple (list obj i v))))

 ;; As a convenience, string->pystring accepts pystrings and returns
 ;; them unmodified.
 (define string->pystring
   (match-lambda
    [(? string? s) (pointer->pyobject
                    ((__c_string_to_python_string) (string->pointer s)))]
    [(? pystring? s) s]
    [other (string-or-pystring-failure 'string->pystring other)] ))

 ;; As a convenience, pystring->string accepts Scheme strings and
 ;; returns them unmodified.
 (define pystring->string
   (match-lambda
    [(? pystring? s) (pointer->string
                      ((__python_string_to_c_string) (pyobject->pointer s)))]
    [(? string? s) s]
    [other (string-or-pystring-failure 'pystring->string other)] ))

 (define pyeval
   (match-lambda
    [(? string? s) (pointer->pyobject
                    ((__c_eval_python) (string->pointer s)))]
    [(? pystring? s) (pyeval (pystring->string s))]
    [other (string-or-pystring-failure 'pyeval other)] ))

 (define (string-or-pystring-failure who obj)
   (assertion-failure who (_ "expected a string or Python string") obj))

 (define (current-pymodule)
   (pointer->pyobject ((__current_python_module))))

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ) ;; end of if-fontforge-has-python-api
