;; -*- mode: scheme; coding: utf-8 -*-

;; Copyright (C) 2012 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(define-module (sortsmillff python))

(import (sortsmillff i18n)
        (sortsmillff strings)
        (rnrs)
        (only (srfi :26) cut)
        (system foreign)
        (ice-9 match))

(export if-fontforge-has-python-api)

(re-export enable-hash-guillemet-strings
           disable-hash-guillemet-strings)

(define-syntax if-fontforge-has-python-api
  (lambda (x)
    (match '@i_do_have_python_scripting@
      ('yes
       (syntax-case x ()
         ((_ e e* ...) #'(begin e e* ...))))
      ('no
       (syntax-case x ()
         ((_ _ _ ...) #'*unspecified*))))))

(if-fontforge-has-python-api

 (export python-dll

         py-initialize
         py-finalize

         make-python-error
         python-error?
         pyerr-type
         condition-pyerr-type
         pyerr-value
         condition-pyerr-value
         pyerr-traceback
         condition-pyerr-traceback

         pyobject?
         pointer->pyobject
         borrowed-pointer->pyobject
         pyobject->pointer

         py-false                ; This is a function, not a constant.
         py-true                 ; This is a function, not a constant.
         py-not
         py-not-not  ; Use this to convert a Python value to a pybool.
         boolean->pybool
         pybool->boolean

         pointer->pylong
         pylong->pointer

         pyrun
         pyrun-filename
         )

 (define python-dll
   (dynamic-link "libguile-sortsmillff_python"))

 (dynamic-call "init_guile_sortsmillff_python" python-dll)

 (define py-initialize
   (pointer->procedure
    void (dynamic-func "Py_Initialize" python-dll) `()))

 (define py-finalize
   (pointer->procedure
    void (dynamic-func "Py_Finalize" python-dll) `()))

 (define-condition-type &python-error &error
   make-python-error python-error?
   (pyerr-type condition-pyerr-type)
   (pyerr-value condition-pyerr-value)
   (pyerr-traceback condition-pyerr-traceback))

 (define-wrapped-pointer-type pyobject
   pyobject?
   private:pointer->pyobject pyobject->pointer
   (lambda (obj port)
     ;; FIXME: Print the __repr__ of the Python object.
     (format port "#<pyobject 0x~x>"
             (pointer-address (pyobject->pointer obj)))))

 (define pointer->pyobject
   (lambda (p)
     (private:pointer->pyobject (grab-pyobject-reference p))))

 (define borrowed-pointer->pyobject 
   (lambda (p)
     (private:pointer->pyobject (grab-borrowed-pyobject-reference p))))

 (define procedure:pyobject->pointer
   ;; Wrap the syntax transformer @var{pyobject->pointer} in a
   ;; procedure, so C code can use it.
   (lambda (x) (pyobject->pointer x)))

 (define pyrun
   (let ((proc (pointer->procedure
                int (dynamic-func "PyRun_SimpleString" python-dll)
                `(*))))
     (match-lambda
       [(? string? s)
        (let ((errval (proc (string->pointer s))))
          (unless (zero? errval) (py-failure 'pyrun s)))]
       [other (assertion-failure
               'pyrun (_ "expected a string") other)])))

 (define pyrun-filename
   (let ((fopen (pointer->procedure
                 '* (dynamic-func "fopen" (dynamic-link))
                 '(* *)))
         (fclose (pointer->procedure
                  int (dynamic-func "fclose" (dynamic-link))
                  '(*)))
         (run (pointer->procedure
               int (dynamic-func "PyRun_SimpleFile" python-dll)
               `(* *))))
     (lambda (filename)
       (let* ((filename-ptr (string->pointer filename))
              (f (fopen filename-ptr (string->pointer "r"))))
         (if (null-pointer? f)
             (error 'pyrun-filename
                    (_ "failed to open file")
                    filename)
             (begin
               (run f filename-ptr)
               (fclose f)))))))


;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; ;;;; FIXME: Everything from here down should be gotten rid of or
;;;; ;;;; revised.
;;;;
;;;; (define Py_single_input @Py_single_input@)
;;;; (define Py_file_input @Py_file_input@)
;;;; (define Py_eval_input @Py_eval_input@)
;;;;
;;;;
;;;; (define PyEval_GetBuiltins
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyEval_GetBuiltins" python-dll)
;;;;                       `()))
;;;; 
;;;; (define PyEval_GetGlobals
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyEval_GetGlobals" python-dll)
;;;;                       `()))
;;;; 
;;;; (define PyEval_GetLocals
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyEval_GetLocals" python-dll)
;;;;                       `()))
;;;; 
;;;; (define PyRun_String
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyRun_String" python-dll)
;;;;                       `(* ,int * *)))
;;;;
;;;; (define PyRun_File
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyRun_File" python-dll)
;;;;                       `(* * ,int * *)))
;;;;
;;;; (define Py_CompileString
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "Py_CompileString" python-dll)
;;;;                       `(* * ,int)))
;;;;
;;;; (define PyEval_EvalCode
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyEval_EvalCode" python-dll)
;;;;                       `(* * *)))
;;;;
;;;; (define PyObject_CallObject
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyObject_CallObject" python-dll)
;;;;                       `(* *)))
;;;;
;;;; (define PyLong_FromUnsignedLong
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyLong_FromUnsignedLong" python-dll)
;;;;                       `(,unsigned-long)))
;;;;
;;;; (define PyLong_FromSize_t
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyLong_FromSize_t" python-dll)
;;;;                       `(,size_t)))
;;;;
;;;; (define PyLong_FromVoidPtr
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyLong_FromVoidPtr" python-dll)
;;;;                       `(*)))
;;;;
;;;; (define PyLong_AsVoidPtr
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyLong_AsVoidPtr" python-dll)
;;;;                       `(*)))
;;;;
;;;; (define PyTuple_New
;;;;   (pointer->procedure '*
;;;;                       (dynamic-func "PyTuple_New" python-dll)
;;;;                       `(,size_t)))
;;;;
;;;; (define PyTuple_SetItem
;;;;   (pointer->procedure int
;;;;                       (dynamic-func "PyTuple_SetItem" python-dll)
;;;;                       `(* ,size_t *)))

 ) ;; end of if-fontforge-has-python-api
