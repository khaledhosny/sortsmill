#! /usr/bin/guile \          -*- mode: bee; coding: utf-8 -*-
--no-auto-compile -s
!#

;;
;; The Type Inspector Generator.
;;
;; Writes C code to examine the layout of C types and generate API
;; instructions.
;;

(use-modules
   (ice-9 match)
   (ice-9 regex)
   (ice-9 format)
   (srfi srfi-26)                       ; ‘cut’ and ‘cute’.
   )

(define (write-c-source includes types)
   (format #t "#include <config.h>\n\n")
   (format #t "#include <stdio.h>\n")
   (format #t "#include <stddef.h>\n")
   (format #t "#include <dirname.h>\n")
   (format #t "\n")
   (write-includes includes)
   (format #t "\n")
   (format #t "int\nmain (int argc, char **argv)\n{\n")
   (format #t "  char *basename = base_name (argv[0]);\n")
   (format #t "  printf (\";; This file contains `API instructions'\\n\");\n")
   (format #t "  printf (\";; that can be translated to FontForge APIs for multiple languages.\\n\");\n")
   (format #t "  printf (\";;\\n\");\n")
   (format #t "  printf (\";; It was generated by %s\\n\", basename);\n")
   (format #t "  printf (\";; which was generated by %s\\n\", ~s);\n"
      (basename (car (command-line))))
   (format #t "  free (basename);\n")
   (format #t "\n")
   (format #t "  printf (\"\\n\");\n")
   (write-instructions (type-info-hash->alist (get-type-info types)))
   (format #t "  return 0;\n}\n")
   )

(define (string-or-symbol? s)
  (or (string? s) (symbol? s)))

(define (field-type? ft)
   (match ft
      ((? symbol? _) #t)                     ; Example: uint
      (('* (? string-or-symbol? _)) #t)      ; Example: (* SplineChar)
      (('struct (? string-or-symbol? _)) #t) ; Example: (struct DBounds)
      (('array (? string-or-symbol? _)) #t)  ; Example: FIXME FIXME
      (else #f)))

(define (force-string s)
  (cond ((string? s) s)
        ((symbol? s) (symbol->string s))
        (else (scm-error
               'wrong-type-arg
               "force-string"
               "Expected string or symbol, but got: ~S"
               (list s)
               (list s)))))

(define angle-brackets-re (make-regexp "<.*>"))
(define quotes-re (make-regexp "\".*\""))

(define (write-includes includes)
   (match includes
      ;; Nothing or an empty list.
      ((or #f ()) '())

      ;; A list of includes.
      (((? string-or-symbol? h) . t)
       (write-includes h)
       (write-includes t))

      ;; A single include.
      ((? string-or-symbol? inc)
       (cond
          ((or
            (regexp-exec angle-brackets-re (force-string inc))
            (regexp-exec quotes-re (force-string inc)))
           (format #t "#include ~a\n" inc))
          (else
           (format #t "#include \"~a\"\n" inc))))

      (inc (error "Unrecognized includes:" inc))))

(define get-type-info
   (case-lambda
      ((instructions) (get-type-info instructions (make-hash-table)))
      ((instructions type-info)
       (match instructions
          ;; Nothing or an empty list.
          ((or #f ()) type-info)

          ;; A list of instructions.
          (((and (_ . _) h) . t)
           (get-type-info h type-info)
           (get-type-info t type-info)
           type-info)

          ;; Example: (field int "struct splinechar" "italic_correction" "SplineChar" "italcorr")
          ;; For structs and unions.
          (('field (? field-type? field-type)
              (? string-or-symbol? struct-name)
              (? string-or-symbol? field-name)
              (? string-or-symbol? replacement-struct-name)
              (? string-or-symbol? replacement-field-name))
           (hash-set! (cdr (hash-ref type-info replacement-struct-name))
              replacement-field-name
              (list
                 (cons 'kind 'field)
                 (cons 'field-type field-type)
                 (cons 'struct-name struct-name)
                 (cons 'field-name field-name)))
           type-info)

          ;; Example: (field int "SplineChar" "italic_correction" "italcorr")
          (('field (? field-type? field-type)
              (? string-or-symbol? struct-name)
              (? string-or-symbol? field-name)
              (? string-or-symbol? replacement-field-name))
           (get-type-info (list 'field field-type struct-name field-name
                             struct-name replacement-field-name)))

          ;; Example: (field int "SplineChar" "italic_correction")
          (('field (? field-type? field-type)
              (? string-or-symbol? struct-name)
              (? string-or-symbol? field-name))
           (get-type-info (list 'field field-type struct-name field-name
                             struct-name field-name)))

          ;; Example (fields "struct gmenuitem" "GMenuItem" (struct "ti") (uint "shortcut"))
          (('fields (? string-or-symbol? struct-name)
              (? string-or-symbol? replacement-struct-name) . fields)
           (get-type-info
              (cons* 'struct struct-name replacement-struct-name
                 (map (cute cons 'field <>) fields))
              type-info))

          ;; Example (fields "GMenuItem" (struct "ti") (uint "shortcut"))
          (('fields (? string-or-symbol? struct-name) . fields)
           (get-type-info
              (cons* 'fields struct-name struct-name fields)
              type-info))

          ;; Example: (struct "struct splinechar" "SplineChar" (sizeof) (field "italic_correction"))
          (((or 'struct 'union)
            (? string-or-symbol? struct-name)
            (? string-or-symbol? replacement-struct-name) . t)
           (hash-set! type-info replacement-struct-name
              (cons struct-name (make-hash-table)))
           (for-each (lambda (sub-instruction)
                        (get-type-info
                           (insert-struct-names struct-name
                              replacement-struct-name sub-instruction)
                           type-info))
              t)
           type-info)

          ;; Example: (struct "SplineChar" (sizeof) (field "italic_correction"))
          (((or 'struct 'union)
            (? string-or-symbol? struct-name) . t)
           (get-type-info
              (cons* 'struct struct-name struct-name t)
              type-info))

          (instr (error "Unrecognized instructions:" instr))))))

(define (type-info-hash->alist type-info)
   (hash-fold
      (lambda (k v prior)
         (cons
            (cons* k (car v)
               (hash-fold
                  (lambda (kk vv priorr)
                     (acons kk vv priorr)) '() (cdr v)))
            prior))
      '() type-info))

(define (write-instructions type-info-alist)
   (match type-info-alist
      ('() *unspecified*)
      (((struct c-struct . fields) . tail)
       (write-struct-instruction struct c-struct)
       (write-fields-instructions struct fields)
       (write-struct->-instruction struct c-struct fields)
       (write-instructions tail))))

(define (write-struct-instruction struct c-struct)
  (format #t "  printf (\"(struct \\\"~a\\\" %zu)\\n\", sizeof (~a));\n"
      struct c-struct)
   (format #t "  printf (\"(sizeof \\\"~a\\\" %zu)\\n\", sizeof (~a));\n"
      struct c-struct))

(define (write-fields-instructions struct fields)
   (match fields
      ('() *unspecified*)
      (((field . info) . tail)
       (match (assq-ref info 'kind)
          ('field
             (format #t "  {\n")
             (format #t "    ~a x;\n"
                (assq-ref info 'struct-name))
             (format #t "    printf (\"(field ~a \\\"~a\\\" \\\"~a\\\" %zu %zu)\\n\",\n"
                (assq-ref info 'field-type)
                struct field)
             (format #t "            offsetof (~a, ~a),\n"
                (assq-ref info 'struct-name)
                (assq-ref info 'field-name))
             (format #t "            sizeof (x.~a));\n"
                (assq-ref info 'field-name))
             (format #t "  }\n")))
       (write-fields-instructions struct tail))))

(define (write-struct->-instruction struct c-struct fields)
   (format #t "  {\n")
   (format #t "    ~a x;\n" c-struct)
   (format #t "    printf (\"(struct-> \\\"~a\\\" \");\n" struct)
   (for-each
      (lambda (f)
         (match f
            ((fld . info)
             (format #t "    printf (\"(\\\"~a\\\" ~a ~a %zu %zu\",\n"
                fld
                (assq-ref info 'kind)
                (assq-ref info 'field-type))
             (format #t "            offsetof (~a, ~a),\n"
                (assq-ref info 'struct-name)
                (assq-ref info 'field-name))
             (format #t "            sizeof (x.~a));\n"
                (assq-ref info 'field-name))
             (format #t "    printf (\") \");\n")
             )))
      fields)
   (format #t "    printf (\")\\n\");\n")
   (format #t "  }\n")
   )
 
(define (insert-struct-names struct-name replacement-struct-name sub-instruction)
   (match sub-instruction
      (('sizeof) (list 'sizeof struct-name replacement-struct-name))

      (('field (? field-type? field-type)
          (? string-or-symbol? field-name)
          (? string-or-symbol? replacement-field-name))
       (list 'field field-type struct-name field-name
          replacement-struct-name replacement-field-name))

      (('field (? field-type? field-type)
          (? string-or-symbol? field-name))
       (list 'field field-type struct-name field-name
          replacement-struct-name field-name))
      (('fields . fields)
       (cons* 'fields struct-name replacement-struct-name fields))

      (('struct->)
       (list 'struct-> replacement-struct-name))
      ))

(let* ((includes (read))
       (instructions (read)))
   (write-c-source includes instructions))
