;; -*- mode: scheme; geiser-scheme-implementation: guile; coding: utf-8 -*-

;; Copyright (C) 2012 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(import (sortsmill notices)
        (sortsmill pure)
        (sortsmill python)
        (system foreign))

;;
;; Try to ensure access to Sorts Mill Toolsâ€™s Guile modules.
;;
(eval-when (compile load eval)
           (let ((guilemoduledir "@guilemoduledir@"))
             (unless (member guilemoduledir %load-path)
               (add-to-load-path guilemoduledir))))
(eval-when (compile load eval)
           (let ((guileobjmoduledir "@guileobjmoduledir@"))
             (unless (member guileobjmoduledir %load-compiled-path)
               (set! %load-compiled-path
                     (cons guileobjmoduledir %load-compiled-path)))))

(fontforge-call-with-error-handling
 "site-init.scm"
 (lambda () ;; start of thunk.

   (if-fontforge-has-pure-api
    (pure-create-interp '("sortsmill-editor")))

   (if-fontforge-has-python-api
    (py-initialize))

   ;;
   ;; Load local-init.scm, which typically is in
   ;; /etc/sortsmill-tools/
   ;;
   (let ((local-init "@sysconfdir@/@PACKAGE@/local-init.scm"))
     (if (file-exists? local-init)
         (fontforge-call-with-error-handling
          "local-init.scm"
          (lambda () (primitive-load local-init)))))

   ;;
   ;; Load user-init.scm, which typically is in
   ;; ${HOME}/.config/sortsmill-tools/
   ;;
   (let* ((xdg-config-home (getenv "XDG_CONFIG_HOME"))
          (home (getenv "HOME"))
          (user-config-dir
           (cond
            (xdg-config-home)
            (home (string-append (getenv "HOME") "/.config"))
            (else #f))))
     (if user-config-dir
         (let ((user-init (string-append user-config-dir
                                         "/@PACKAGE@/user-init.scm")))
           (if (file-exists? user-init)
               (fontforge-call-with-error-handling
                "user-init.scm"
                (lambda () (primitive-load user-init)))))))

   (if-fontforge-has-python-api
    ;;
    ;; Load site_init.py.
    ;;
    (let ((py-init "@pkgpythondatadir@/site_init.py"))
      (if (file-exists? py-init)
          (pyexec-file-name py-init))))

   ) ;; end of thunk.
 )   ;; end of fontforge-call-with-error-handling.
