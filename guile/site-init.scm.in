;; -*- mode: scheme; geiser-scheme-implementation: guile; coding: utf-8 -*-

;; Copyright (C) 2012, 2013 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(import (sortsmill notices)
        (sortsmill pkg-info)
        (system foreign))

(@ (sortsmill hash-guillemet) enable-hash-guillemet-strings)

(if (not (getenv "HOME"))
    (let ([rnrs-error (@ (rnrs) error)]
          [_          (@ (sortsmill i18n) _)])
      (rnrs-error
       "site-init.scm"
       (_ "the HOME environment variable is not set; please set it"))))

;;
;; Try to ensure access to Sorts Mill Tools’s Guile modules.
;;
;; FIXME: Try to ensure access to LTDL modules, too.
;;
(eval-when (compile load eval)
           (let ((guilemoduledir "@guilemoduledir@"))
             (unless (member guilemoduledir %load-path)
               (add-to-load-path guilemoduledir))))
(eval-when (compile load eval)
           (let ((guileobjmoduledir "@guileobjmoduledir@"))
             (unless (member guileobjmoduledir %load-compiled-path)
               (set! %load-compiled-path
                     (cons guileobjmoduledir %load-compiled-path)))))

(fontforge-call-with-error-handling
 "site-init.scm"
 (lambda () ;; start of thunk.

   [if pkg-info:have-pure-api?
       (let ([pure-create-interp (@ (sortsmill pure) pure-create-interp)])
         (pure-create-interp '("sortsmill-editor")))]

   [if pkg-info:have-python-api?
       (let ([force-py-initialized (@ (sortsmill python) force-py-initialized)]
             [pyexec-in-main       (@ (sortsmill python) pyexec-in-main)]
             [lines-begin-with     (@ (sortsmill python) lines-begin-with)])
         (force-py-initialized)
         (pyexec-in-main
          (lines-begin-with
           ";; —"
           #«
           ;; —# FIXME: Get rid of this dependency.
           ;; —import sortsmill.ffcompat
           ;; —
           ;; —if "@PYTHON_COMPATIBILITY@" == "yes":
           ;; —  import fontforge
           ;; —sortsmill.ffcompat.__windowing_ui (True)
           ;; —sortsmill.ffcompat.__running_script (False)
           ;; —import sortsmill.psMat
           ;; —if "@PYTHON_COMPATIBILITY@" == "yes":
           ;; —  import psMat
           ;; —import ffContrib.excepthook
           »#))
         )]

   ;;
   ;; Load local-init.scm, which typically is in /etc/sortsmill-tools/
   ;;
   (let ([local-init "@sysconfdir@/@PACKAGE@/local-init.scm"])
     (if (file-exists? local-init)
         (fontforge-call-with-error-handling
          "local-init.scm"
          (lambda () (primitive-load local-init)))))

   [if pkg-info:have-python-api?
       ;;
       ;; Load local_init.py, which typically is in /etc/sortsmill-tools/
       ;;
       (let ([local-init "@sysconfdir@/@PACKAGE@/local_init.py"]
             [pyexec-file-name-in-main (@ (sortsmill python)
                                          pyexec-file-name-in-main)])
         (if (file-exists? local-init)
             (fontforge-call-with-error-handling
              "local_init.py"
              (lambda () (pyexec-file-name-in-main local-init)))))]

   ;;
   ;; Load user-init.scm, which typically is in
   ;; ${HOME}/.config/sortsmill-tools/
   ;;
   (let* ([xdg-config-home (getenv "XDG_CONFIG_HOME")]
          [home (getenv "HOME")]
          [user-config-dir
           (cond [xdg-config-home]
                 [home (string-append (getenv "HOME") "/.config")]
                 [else #f] )] )
     (if user-config-dir
         (let ([user-init (string-append user-config-dir
                                         "/@PACKAGE@/user-init.scm")])
           (if (file-exists? user-init)
               (fontforge-call-with-error-handling
                "user-init.scm"
                (lambda () (primitive-load user-init)))))))

   [if pkg-info:have-python-api?
       ;;
       ;; Load user_init.py, which typically is in
       ;; ${HOME}/.config/sortsmill-tools/
       ;;
       (let* ([xdg-config-home (getenv "XDG_CONFIG_HOME")]
              [home (getenv "HOME")]
              [user-config-dir
               (cond [xdg-config-home]
                     [home (string-append (getenv "HOME") "/.config")]
                     [else #f] )]
              [pyexec-file-name-in-main (@ (sortsmill python)
                                           pyexec-file-name-in-main)])
         (if user-config-dir
             (let ([user-init (string-append user-config-dir
                                             "/@PACKAGE@/user_init.py")])
               (if (file-exists? user-init)
                   (fontforge-call-with-error-handling
                    "user_init.py"
                    (lambda () (pyexec-file-name-in-main user-init)))))))]

   ) ;; end of thunk.
 )   ;; end of fontforge-call-with-error-handling.
