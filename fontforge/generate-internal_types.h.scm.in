#! @GUILE@ \           -*- mode: bee; coding: utf-8 -*-
--no-auto-compile -s
!#

;; Copyright (C) 2012 Barry Schwartz
;; 
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, see <http://www.gnu.org/licenses/>.

(use-modules
   (ice-9 popen)
   (ice-9 match)
   (ice-9 format)
   )

(define instruction-sources
   (list "@abs_top_builddir@/fontforge/fontforge_type_inspector"))

(define (read-instructions port)
   (do ((instruction (read port) (read port)))
       ((eof-object? instruction))
       (write-instruction instruction)))

(define (read-instruction-sources sources)
   (match sources
      (() *unspecified*)
      ((h . t)
       (let ((port (open-input-pipe h)))
          (read-instructions port)
          (close-pipe port)
          (read-instruction-sources t)))))

(define (write-instruction instruction)
   (match instruction
      (('struct (? string? struct-name) (? integer? size))
       (format #t "inline void *malloc_ff_~a (void);\n" struct-name)
       (format #t "inline void *malloc_ff_~a (void) { return xdie_on_null (calloc (1, ~d)); }\n"
          struct-name size)
       (format #t "\n")
       (format #t "inline void free_ff_~a (void *);\n" struct-name)
       (format #t "inline void free_ff_~a (void *p) { free (p); }\n" struct-name)
       (format #t "\n")
       (format #t "inline void *gc_malloc_ff_~a (void);\n" struct-name)
       (format #t "inline void *gc_malloc_ff_~a (void) { return x_gc_malloc (~d); }\n"
          struct-name size)
       (format #t "\n")
       (format #t "inline void gc_free_ff_~a (void *);\n" struct-name)
       (format #t "inline void gc_free_ff_~a (void *p) { GC_FREE (p); }\n" struct-name)
       (format #t "\n")
       )
      (('sizeof (? string? struct-name) (? integer? size))
       (format #t "inline size_t sizeof_ff_~a (void);\n" struct-name)
       (format #t "inline size_t sizeof_ff_~a (void) { return ~d; };\n" struct-name size)
       (format #t "\n")
       )
      (('field (? symbol? field-type) (? string? struct-name)
          (? string? field-name) (? integer? offset) (? integer? size))
       (format #t "inline ~a get_ff_~a_~a (void *);\n"
          (value-c-type field-type size) struct-name field-name)
       (format #t "inline ~a get_ff_~a_~a (void *p) { return ~a; }\n"
          (value-c-type field-type size) struct-name field-name
          (get-value-expression field-type offset size "p"))
       (format #t "\n")
       (format #t "inline void set_ff_~a_~a (void *, ~a);\n"
          struct-name field-name (value-c-type field-type size))
       (format #t "inline void set_ff_~a_~a (void *p, ~a v) { ~a; }\n"
          struct-name field-name (value-c-type field-type size)
          (set-value-expression field-type offset size "p" "v"))
       (format #t "\n")
       (format #t "inline void *ptr_ff_~a_~a (void *);\n"
          struct-name field-name)
       (format #t "inline void *ptr_ff_~a_~a (void *p) { return (void *) &((char *) p)[~d]; }\n"
          struct-name field-name offset)
       (format #t "\n")
       )
      ))

(define (value-c-type field-type size)
   (match (cons field-type size)
      (('int . 1) "int")
      (('int . 2) "int")
      (('int . 4) "int")
      (('int . 8) "int64_t")
      (('uint . 1) "unsigned int")
      (('uint . 2) "unsigned int")
      (('uint . 4) "unsigned int")
      (('uint . 8) "uint64_t")
      (('bool . 1) "bool")
      (('bool . 2) "bool")
      (('bool . 4) "bool")
      (('bool . 8) "bool")
      (('* . 1) "void *")
      (('* . 2) "void *")
      (('* . 4) "void *")
      (('* . 8) "void *")))

(define (get-value-expression field-type offset size pointer-expression)
   (let ((address (format #f "((void *) &((char *) (~a))[~d])"
                     pointer-expression offset)))
      (match (cons field-type size)
         (('int . 1) (format #f "(*(int8_t *) ~a)" address))
         (('int . 2) (format #f "(*(int16_t *) ~a)" address))
         (('int . 4) (format #f "(*(int32_t *) ~a)" address))
         (('int . 8) (format #f "(*(int64_t *) ~a)" address))
         (('uint . 1) (format #f "(*(uint8_t *) ~a)" address))
         (('uint . 2) (format #f "(*(uint16_t *) ~a)" address))
         (('uint . 4) (format #f "(*(uint32_t *) ~a)" address))
         (('uint . 8) (format #f "(*(uint64_t *) ~a)" address))
         (('bool . 1) (format #f "((bool) (*(uint8_t *) ~a != 0))" address))
         (('bool . 2) (format #f "((bool) (*(uint16_t *) ~a != 0))" address))
         (('bool . 4) (format #f "((bool) (*(uint32_t *) ~a != 0))" address))
         (('bool . 8) (format #f "((bool) (*(uint64_t *) ~a != 0))" address))
         (('* . 1) (format #f "((void *) *(uint8_t *) ~a)" address))
         (('* . 2) (format #f "((void *) *(uint16_t *) ~a)" address))
         (('* . 4) (format #f "((void *) *(uint32_t *) ~a)" address))
         (('* . 8) (format #f "((void *) *(uint64_t *) ~a)" address)))))

(define (set-value-expression field-type offset size pointer-expression
           value-expression)
   (let ((address (format #f "((void *) &((char *) (~a))[~d])"
                     pointer-expression offset)))
      (match (cons field-type size)
         (('int . 1) (format #f "(*(int8_t *) ~a = (~a))"
                        address value-expression))
         (('int . 2) (format #f "(*(int16_t *) ~a = (~a))"
                        address value-expression))
         (('int . 4) (format #f "(*(int32_t *) ~a = (~a))"
                        address value-expression))
         (('int . 8) (format #f "(*(int64_t *) ~a = (~a))"
                        address value-expression))
         (('uint . 1) (format #f "(*(uint8_t *) ~a = (~a))"
                         address value-expression))
         (('uint . 2) (format #f "(*(uint16_t *) ~a = (~a))"
                         address value-expression))
         (('uint . 4) (format #f "(*(uint32_t *) ~a = (~a))"
                         address value-expression))
         (('uint . 8) (format #f "(*(uint64_t *) ~a = (~a))"
                         address value-expression))
         (('bool . 1) (format #f "(*(uint8_t *) ~a = ((~a) != 0))"
                         address value-expression))
         (('bool . 2) (format #f "(*(uint16_t *) ~a = ((~a) != 0))"
                         address value-expression))
         (('bool . 4) (format #f "(*(uint32_t *) ~a = ((~a) != 0))"
                         address value-expression))
         (('bool . 8) (format #f "(*(uint64_t *) ~a = ((~a) != 0))"
                         address value-expression))
         (('* . 1) (format #f "(*(uint8_t *) ~a = (uint8_t) (uintptr_t) (~a))"
                      address value-expression))
         (('* . 2) (format #f "(*(uint16_t *) ~a = (uint16_t) (uintptr_t) (~a))"
                      address value-expression))
         (('* . 4) (format #f "(*(uint32_t *) ~a = (uint32_t) (uintptr_t) (~a))"
                      address value-expression))
         (('* . 8) (format #f "(*(uint64_t *) ~a = (uint64_t) (uintptr_t) (~a))"
                      address value-expression)))))

(format #t "/* Generated by ~s */\n" (car (command-line)))
(format #t "\n")
(format #t "#ifndef SORTSMILLFF_INTERNAL_TYPES_H\n")
(format #t "#define SORTSMILLFF_INTERNAL_TYPES_H\n")
(format #t "\n")
(format #t "#include <stdlib.h>\n")
(format #t "#include <stdint.h>\n")
(format #t "#include <stdbool.h>\n")
(format #t "#include <sortsmillff/xgc.h>\n")
(format #t "#include <sortsmillff/xdie_on_null.h>\n")
(format #t "\n")
(format #t "#ifdef __cplusplus\n")
(format #t "extern \"C\" {\n")
(format #t "#endif\n")
(format #t "\n")
(read-instruction-sources instruction-sources)
(format #t "#ifdef __cplusplus\n")
(format #t "}\n")
(format #t "#endif\n")
(format #t "\n")
(format #t "#endif /* SORTSMILLFF_INTERNAL_TYPES_H */\n")
